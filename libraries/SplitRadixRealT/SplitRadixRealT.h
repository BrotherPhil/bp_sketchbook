#ifndef _SPLITRADIXREALT_H_
#define _SPLITRADIXREALT_H_

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <inttypes.h>
#include <stdio.h>
#include <avr/pgmspace.h>

#define    FFT_SIZE           512
#define    MIRROR        FFT_SIZE / 2
#define    LOG2_FFT             9 	/* log2 FFT_SIZE */
#define    NWAVE              512  	/* full length of Sinewave[] */
#define    NQUAT            NWAVE / 4

const prog_int16_t Sinewave[NWAVE] PROGMEM = {
/* 8-bits */
    +0,    +3,    +6,    +9,   +13,   +16,   +19,   +22,   +25,   +28,   +31,   +35,   +38,   +41,   +44,   +47,
   +50,   +53,   +56,   +59,   +62,   +65,   +68,   +71,   +74,   +77,   +80,   +83,   +86,   +89,   +92,   +95,
   +98,  +101,  +104,  +107,  +110,  +112,  +115,  +118,  +121,  +124,  +126,  +129,  +132,  +135,  +137,  +140,
  +142,  +145,  +148,  +150,  +153,  +155,  +158,  +160,  +163,  +165,  +167,  +170,  +172,  +175,  +177,  +179,
  +181,  +184,  +186,  +188,  +190,  +192,  +194,  +196,  +198,  +200,  +202,  +204,  +206,  +208,  +210,  +211,
  +213,  +215,  +217,  +218,  +220,  +221,  +223,  +225,  +226,  +227,  +229,  +230,  +232,  +233,  +234,  +236,
  +237,  +238,  +239,  +240,  +241,  +242,  +243,  +244,  +245,  +246,  +247,  +248,  +248,  +249,  +250,  +251,
  +251,  +252,  +252,  +253,  +253,  +254,  +254,  +255,  +255,  +255,  +255,  +256,  +256,  +256,  +256,  +256,
  +256,  +256,  +256,  +256,  +256,  +255,  +255,  +255,  +255,  +254,  +254,  +254,  +253,  +253,  +252,  +252,
  +251,  +250,  +250,  +249,  +248,  +247,  +246,  +246,  +245,  +244,  +243,  +242,  +241,  +240,  +238,  +237,
  +236,  +235,  +234,  +232,  +231,  +230,  +228,  +227,  +225,  +224,  +222,  +221,  +219,  +217,  +216,  +214,
  +212,  +210,  +209,  +207,  +205,  +203,  +201,  +199,  +197,  +195,  +193,  +191,  +189,  +187,  +185,  +182,
  +180,  +178,  +176,  +173,  +171,  +169,  +166,  +164,  +161,  +159,  +157,  +154,  +151,  +149,  +146,  +144,
  +141,  +139,  +136,  +133,  +130,  +128,  +125,  +122,  +120,  +117,  +114,  +111,  +108,  +105,  +102,  +100,
   +97,   +94,   +91,   +88,   +85,   +82,   +79,   +76,   +73,   +70,   +67,   +64,   +61,   +58,   +55,   +52,
   +48,   +45,   +42,   +39,   +36,   +33,   +30,   +27,   +24,   +20,   +17,   +14,   +11,    +8,    +5,    +2,
    -2,    -5,    -8,   -11,   -14,   -17,   -20,   -24,   -27,   -30,   -33,   -36,   -39,   -42,   -45,   -48,
   -52,   -55,   -58,   -61,   -64,   -67,   -70,   -73,   -76,   -79,   -82,   -85,   -88,   -91,   -94,   -97,
  -100,  -102,  -105,  -108,  -111,  -114,  -117,  -120,  -122,  -125,  -128,  -130,  -133,  -136,  -139,  -141,
  -144,  -146,  -149,  -151,  -154,  -157,  -159,  -161,  -164,  -166,  -169,  -171,  -173,  -176,  -178,  -180,
  -182,  -185,  -187,  -189,  -191,  -193,  -195,  -197,  -199,  -201,  -203,  -205,  -207,  -209,  -210,  -212,
  -214,  -216,  -217,  -219,  -221,  -222,  -224,  -225,  -227,  -228,  -230,  -231,  -232,  -234,  -235,  -236,
  -237,  -238,  -240,  -241,  -242,  -243,  -244,  -245,  -246,  -246,  -247,  -248,  -249,  -250,  -250,  -251,
  -252,  -252,  -253,  -253,  -254,  -254,  -254,  -255,  -255,  -255,  -255,  -256,  -256,  -256,  -256,  -256,
  -256,  -256,  -256,  -256,  -256,  -255,  -255,  -255,  -255,  -254,  -254,  -253,  -253,  -252,  -252,  -251,
  -251,  -250,  -249,  -248,  -248,  -247,  -246,  -245,  -244,  -243,  -242,  -241,  -240,  -239,  -238,  -237,
  -236,  -234,  -233,  -232,  -230,  -229,  -227,  -226,  -225,  -223,  -221,  -220,  -218,  -217,  -215,  -213,
  -211,  -210,  -208,  -206,  -204,  -202,  -200,  -198,  -196,  -194,  -192,  -190,  -188,  -186,  -184,  -181,
  -179,  -177,  -175,  -172,  -170,  -167,  -165,  -163,  -160,  -158,  -155,  -153,  -150,  -148,  -145,  -142,
  -140,  -137,  -135,  -132,  -129,  -126,  -124,  -121,  -118,  -115,  -112,  -110,  -107,  -104,  -101,   -98,
   -95,   -92,   -89,   -86,   -83,   -80,   -77,   -74,   -71,   -68,   -65,   -62,   -59,   -56,   -53,   -50,
   -47,   -44,   -41,   -38,   -35,   -31,   -28,   -25,   -22,   -19,   -16,   -13,    -9,    -6,    -3,    +0
};

const prog_int16_t Hamming[NWAVE] PROGMEM = {
/* 8-bits */
    +20,   +20,   +20,   +20,   +20,   +20,   +20,   +20,   +21,   +21,   +21,   +21,   +21,   +21,   +22,   +22,
    +22,   +23,   +23,   +23,   +24,   +24,   +24,   +25,   +25,   +26,   +26,   +26,   +27,   +27,   +28,   +28,
    +29,   +30,   +30,   +31,   +31,   +32,   +33,   +33,   +34,   +35,   +35,   +36,   +37,   +38,   +38,   +39,
    +40,   +41,   +42,   +42,   +43,   +44,   +45,   +46,   +47,   +48,   +49,   +50,   +51,   +52,   +53,   +54,
    +55,   +56,   +57,   +58,   +59,   +60,   +61,   +62,   +63,   +64,   +65,   +67,   +68,   +69,   +70,   +71,
    +73,   +74,   +75,   +76,   +77,   +79,   +80,   +81,   +82,   +84,   +85,   +86,   +88,   +89,   +90,   +92,
    +93,   +94,   +96,   +97,   +98,  +100,  +101,  +102,  +104,  +105,  +107,  +108,  +109,  +111,  +112,  +114,
   +115,  +116,  +118,  +119,  +121,  +122,  +124,  +125,  +127,  +128,  +129,  +131,  +132,  +134,  +135,  +137,
   +138,  +140,  +141,  +142,  +144,  +145,  +147,  +148,  +150,  +151,  +153,  +154,  +155,  +157,  +158,  +160,
   +161,  +163,  +164,  +165,  +167,  +168,  +170,  +171,  +172,  +174,  +175,  +176,  +178,  +179,  +181,  +182,
   +183,  +185,  +186,  +187,  +189,  +190,  +191,  +192,  +194,  +195,  +196,  +197,  +199,  +200,  +201,  +202,
   +204,  +205,  +206,  +207,  +208,  +209,  +211,  +212,  +213,  +214,  +215,  +216,  +217,  +218,  +219,  +220,
   +221,  +222,  +223,  +224,  +225,  +226,  +227,  +228,  +229,  +230,  +231,  +232,  +233,  +234,  +234,  +235,
   +236,  +237,  +238,  +238,  +239,  +240,  +240,  +241,  +242,  +243,  +243,  +244,  +244,  +245,  +246,  +246,
   +247,  +247,  +248,  +248,  +249,  +249,  +250,  +250,  +251,  +251,  +251,  +252,  +252,  +252,  +253,  +253,
   +253,  +254,  +254,  +254,  +254,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,
   +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +255,  +254,  +254,  +254,  +254,  +253,
   +253,  +253,  +252,  +252,  +252,  +251,  +251,  +251,  +250,  +250,  +249,  +249,  +248,  +248,  +247,  +247,
   +246,  +246,  +245,  +244,  +244,  +243,  +243,  +242,  +241,  +240,  +240,  +239,  +238,  +238,  +237,  +236,
   +235,  +234,  +234,  +233,  +232,  +231,  +230,  +229,  +228,  +227,  +226,  +225,  +224,  +223,  +222,  +221,
   +220,  +219,  +218,  +217,  +216,  +215,  +214,  +213,  +212,  +211,  +209,  +208,  +207,  +206,  +205,  +204,
   +202,  +201,  +200,  +199,  +197,  +196,  +195,  +194,  +192,  +191,  +190,  +189,  +187,  +186,  +185,  +183,
   +182,  +181,  +179,  +178,  +176,  +175,  +174,  +172,  +171,  +170,  +168,  +167,  +165,  +164,  +163,  +161,
   +160,  +158,  +157,  +155,  +154,  +153,  +151,  +150,  +148,  +147,  +145,  +144,  +142,  +141,  +140,  +138,
   +137,  +135,  +134,  +132,  +131,  +129,  +128,  +127,  +125,  +124,  +122,  +121,  +119,  +118,  +116,  +115,
   +114,  +112,  +111,  +109,  +108,  +107,  +105,  +104,  +102,  +101,  +100,   +98,   +97,   +96,   +94,   +93,
    +92,   +90,   +89,   +88,   +86,   +85,   +84,   +82,   +81,   +80,   +79,   +77,   +76,   +75,   +74,   +73,
    +71,   +70,   +69,   +68,   +67,   +65,   +64,   +63,   +62,   +61,   +60,   +59,   +58,   +57,   +56,   +55,
    +54,   +53,   +52,   +51,   +50,   +49,   +48,   +47,   +46,   +45,   +44,   +43,   +42,   +42,   +41,   +40,
    +39,   +38,   +38,   +37,   +36,   +35,   +35,   +34,   +33,   +33,   +32,   +31,   +31,   +30,   +30,   +29,
    +28,   +28,   +27,   +27,   +26,   +26,   +26,   +25,   +25,   +24,   +24,   +24,   +23,   +23,   +23,   +22,
    +22,   +22,   +21,   +21,   +21,   +21,   +21,   +21,   +20,   +20,   +20,   +20,   +20,   +20,   +20,   +20
};

#define mult_shf_s16x16( a, b)    \
({                        \
int prod, val1=a, val2=b; \
__asm__ __volatile__ (    \ 
"muls %B1, %B2	\n\t"     \
"mov %B0, r0    \n\t"	  \ 
"mul %A1, %A2   \n\t"	  \ 
"mov %A0, r1    \n\t"     \ 
"mulsu %B1, %A2	\n\t"     \ 
"add %A0, r0    \n\t"     \ 
"adc %B0, r1    \n\t"     \ 
"mulsu %B2, %A1	\n\t"     \ 
"add %A0, r0    \n\t"     \ 
"adc %B0, r1    \n\t"     \ 
"clr r1         \n\t"     \ 
: "=&d" (prod)            \
: "a" (val1), "a" (val2)  \
);                        \
prod;                     \
})

class SplitRadixRealT {
public:
	SplitRadixRealT();

	inline void mult_shf_I( int c, int s, int x, int y, int &u, int &v)  __attribute__((always_inline));

	inline void sumdiff(  int &, int &)  __attribute__((always_inline));
	inline void sumdiff_r(int &, int &)  __attribute__((always_inline));
	inline void sumdiff( int, int, int &, int &)  __attribute__((always_inline));
	inline void sumdiff3(int &, int, int &)  __attribute__((always_inline));
	inline void diffsum3_r(int, int &, int &)  __attribute__((always_inline));

    	void rev_bin( int *, int16_t );
	void fft_split_radix_real(int *, int );
	void gain_Reset( int *, int);
	void get_Magnit1( int *);
	void get_Magnit2( int *);

private:
};

#endif  /* _SPLITRADIXREALT_H_ */
